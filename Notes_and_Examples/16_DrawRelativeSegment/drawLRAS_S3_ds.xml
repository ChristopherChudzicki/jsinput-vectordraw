<problem display_name="webGLDemo">
<script type="loncapa/python">
<![CDATA[
import vectordraw

### Custom Checks ###

def check_sras2_midpoint(check, vectors):
    vec = vectors['SRAS2']
    tolerance = check.get('tolerance', 1.0)
    mid_x = (vec.tail.x + vec.tip.x) / 2.0
    mid_y = (vec.tail.y + vec.tip.y) / 2.0
    expected_x = check.get('x', mid_x)
    expected_y = check.get('y', mid_y)
    dist = math.hypot(expected_x - mid_x, expected_y - mid_y)
    if dist > tolerance:
        return "You have drawn the curve incorrectly."


def check_sras2_rel_sras1(check, vectors):
    v1 = vectors['SRAS1']
    mid1_x = (v1.tail.x + v1.tip.x) / 2.0
    mid1_y = (v1.tail.y + v1.tip.y) / 2.0

    v2 = vectors['SRAS2']
    mid2_x = (v2.tail.x + v2.tip.x) / 2.0
    mid2_y = (v2.tail.y + v2.tip.y) / 2.0

    dist_x = (mid2_x - mid1_x)
    dist_y = (mid2_y - mid1_y)

    if dist_x < 0 or dist_y > 0:
        return "Something is wrong with your solution."

custom_checks = {
  'check_sras2_midpoint': check_sras2_midpoint,
  'check_sras2_rel_sras1': check_sras2_rel_sras1
}


success_message = 'Good job!'

grader = vectordraw.Grader(success_message, custom_checks)
]]>
</script>
<p>
<b>Scenario 3: Now assume that in Econoland input costs decline. Using an upward sloping short-run aggregate supply curve, graph this change.</b>
</p>
<p>
Use your mouse (or finger on a tablet), to draw the new SRAS curve.
</p>
<customresponse cfn="grader.cfn">
  <jsinput gradefn="getInput"
    get_statefn="getState"
    set_statefn="setState"
    initial_state='{}'
    width="800"
    height="480"
    html_file="/static/drawSRAS_S3_ds.html"
    />
</customresponse>
</problem>
